// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shift_query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activeShiftList = `-- name: ActiveShiftList :many
Select id, machineid, shift_master, createdat, isactive, deactivatedat FROM Shifts
WHERE isActive IS TRUE
ORDER BY id
`

func (q *Queries) ActiveShiftList(ctx context.Context) ([]Shift, error) {
	rows, err := q.db.Query(ctx, activeShiftList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(
			&i.ID,
			&i.Machineid,
			&i.ShiftMaster,
			&i.Createdat,
			&i.Isactive,
			&i.Deactivatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const addShiftTask = `-- name: AddShiftTask :one
INSERT INTO Shift_tasks(
    shiftId, taskId
) VALUES (
    $1, $2
)
RETURNING shiftid, taskid
`

type AddShiftTaskParams struct {
	Shiftid int64
	Taskid  int64
}

func (q *Queries) AddShiftTask(ctx context.Context, arg AddShiftTaskParams) (ShiftTask, error) {
	row := q.db.QueryRow(ctx, addShiftTask, arg.Shiftid, arg.Taskid)
	var i ShiftTask
	err := row.Scan(&i.Shiftid, &i.Taskid)
	return i, err
}

const addShiftWorker = `-- name: AddShiftWorker :one
INSERT INTO Shift_workers(
    shiftId, userId
) VALUES (
    $1, $2
)
RETURNING shiftid, userid
`

type AddShiftWorkerParams struct {
	Shiftid int64
	Userid  int64
}

func (q *Queries) AddShiftWorker(ctx context.Context, arg AddShiftWorkerParams) (ShiftWorker, error) {
	row := q.db.QueryRow(ctx, addShiftWorker, arg.Shiftid, arg.Userid)
	var i ShiftWorker
	err := row.Scan(&i.Shiftid, &i.Userid)
	return i, err
}

const changeShiftActivity = `-- name: ChangeShiftActivity :exec
UPDATE Shifts
SET 
    isActive = $1
WHERE id = $2
`

type ChangeShiftActivityParams struct {
	Isactive pgtype.Bool
	ID       int64
}

func (q *Queries) ChangeShiftActivity(ctx context.Context, arg ChangeShiftActivityParams) error {
	_, err := q.db.Exec(ctx, changeShiftActivity, arg.Isactive, arg.ID)
	return err
}

const createShift = `-- name: CreateShift :one
INSERT INTO Shifts(
    id, machineId, shift_master, createdAt, isActive
) VALUES (
    $1, $2, $3, CURRENT_DATE, TRUE
)
RETURNING id, machineid, shift_master, createdat, isactive, deactivatedat
`

type CreateShiftParams struct {
	ID          int64
	Machineid   int64
	ShiftMaster int64
}

func (q *Queries) CreateShift(ctx context.Context, arg CreateShiftParams) (Shift, error) {
	row := q.db.QueryRow(ctx, createShift, arg.ID, arg.Machineid, arg.ShiftMaster)
	var i Shift
	err := row.Scan(
		&i.ID,
		&i.Machineid,
		&i.ShiftMaster,
		&i.Createdat,
		&i.Isactive,
		&i.Deactivatedat,
	)
	return i, err
}

const deleteShift = `-- name: DeleteShift :exec
DELETE FROM Shifts
WHERE id = $1
`

func (q *Queries) DeleteShift(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteShift, id)
	return err
}

const deleteShiftTask = `-- name: DeleteShiftTask :exec
DELETE FROM Shift_tasks
WHERE shiftId = $1 AND taskId = $2
`

type DeleteShiftTaskParams struct {
	Shiftid int64
	Taskid  int64
}

func (q *Queries) DeleteShiftTask(ctx context.Context, arg DeleteShiftTaskParams) error {
	_, err := q.db.Exec(ctx, deleteShiftTask, arg.Shiftid, arg.Taskid)
	return err
}

const deleteShiftWorker = `-- name: DeleteShiftWorker :exec
DELETE FROM Shift_workers
WHERE shiftId = $1 AND userId = $2
`

type DeleteShiftWorkerParams struct {
	Shiftid int64
	Userid  int64
}

func (q *Queries) DeleteShiftWorker(ctx context.Context, arg DeleteShiftWorkerParams) error {
	_, err := q.db.Exec(ctx, deleteShiftWorker, arg.Shiftid, arg.Userid)
	return err
}

const shiftList = `-- name: ShiftList :many
Select id, machineid, shift_master, createdat, isactive, deactivatedat FROM Shifts
ORDER BY id
`

func (q *Queries) ShiftList(ctx context.Context) ([]Shift, error) {
	rows, err := q.db.Query(ctx, shiftList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(
			&i.ID,
			&i.Machineid,
			&i.ShiftMaster,
			&i.Createdat,
			&i.Isactive,
			&i.Deactivatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shiftTasksList = `-- name: ShiftTasksList :many
Select shiftid, taskid FROM Shift_tasks
WHERE shiftId = $1
ORDER BY taskId
`

func (q *Queries) ShiftTasksList(ctx context.Context, shiftid int64) ([]ShiftTask, error) {
	rows, err := q.db.Query(ctx, shiftTasksList, shiftid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShiftTask
	for rows.Next() {
		var i ShiftTask
		if err := rows.Scan(&i.Shiftid, &i.Taskid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shiftWorkersList = `-- name: ShiftWorkersList :many
Select shiftid, userid FROM Shift_workers
WHERE shiftId = $1 
ORDER BY userId
`

func (q *Queries) ShiftWorkersList(ctx context.Context, shiftid int64) ([]ShiftWorker, error) {
	rows, err := q.db.Query(ctx, shiftWorkersList, shiftid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShiftWorker
	for rows.Next() {
		var i ShiftWorker
		if err := rows.Scan(&i.Shiftid, &i.Userid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
