// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task_query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO Tasks(
    machineId, shiftId, frequency, taskPriority, description, createdBy, createdAt
) VALUES (
    $1, $2, $3, $4, $5, $6, CURRENT_DATE
)
RETURNING id, machineid, shiftid, frequency, taskpriority, description, createdby, createdat, verifiedby, verifiedat, completedby, completedat, status, comment, movedinprogressby, movedinprogressat
`

type CreateTaskParams struct {
	Machineid    int64
	Shiftid      pgtype.Int8
	Frequency    Taskfrequency
	Taskpriority Taskpriority
	Description  string
	Createdby    int64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Machineid,
		arg.Shiftid,
		arg.Frequency,
		arg.Taskpriority,
		arg.Description,
		arg.Createdby,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Machineid,
		&i.Shiftid,
		&i.Frequency,
		&i.Taskpriority,
		&i.Description,
		&i.Createdby,
		&i.Createdat,
		&i.Verifiedby,
		&i.Verifiedat,
		&i.Completedby,
		&i.Completedat,
		&i.Status,
		&i.Comment,
		&i.Movedinprogressby,
		&i.Movedinprogressat,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM Tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const setTaskStatusCompleted = `-- name: SetTaskStatusCompleted :exec
UPDATE Tasks
SET 
    status = 'completed',
    completedAt = CURRENT_DATE,
    completedBy = $1
WHERE id = $2
`

type SetTaskStatusCompletedParams struct {
	Completedby pgtype.Int8
	ID          int64
}

func (q *Queries) SetTaskStatusCompleted(ctx context.Context, arg SetTaskStatusCompletedParams) error {
	_, err := q.db.Exec(ctx, setTaskStatusCompleted, arg.Completedby, arg.ID)
	return err
}

const setTaskStatusFailed = `-- name: SetTaskStatusFailed :exec
UPDATE Tasks
SET 
    status = 'failed',
    comment = $1
WHERE id = $2
`

type SetTaskStatusFailedParams struct {
	Comment pgtype.Text
	ID      int64
}

func (q *Queries) SetTaskStatusFailed(ctx context.Context, arg SetTaskStatusFailedParams) error {
	_, err := q.db.Exec(ctx, setTaskStatusFailed, arg.Comment, arg.ID)
	return err
}

const setTaskStatusInProgress = `-- name: SetTaskStatusInProgress :exec
UPDATE Tasks
SET 
    status = 'inProgress',
    movedInProgressAt = CURRENT_DATE,
    movedInProgressBy = $1
WHERE id = $2
`

type SetTaskStatusInProgressParams struct {
	Movedinprogressby pgtype.Int8
	ID                int64
}

func (q *Queries) SetTaskStatusInProgress(ctx context.Context, arg SetTaskStatusInProgressParams) error {
	_, err := q.db.Exec(ctx, setTaskStatusInProgress, arg.Movedinprogressby, arg.ID)
	return err
}

const setTaskStatusVerified = `-- name: SetTaskStatusVerified :exec
UPDATE Tasks
SET 
    status = 'verified',
    verifiedAt = CURRENT_DATE,
    verifiedBy = $1
WHERE id = $2
`

type SetTaskStatusVerifiedParams struct {
	Verifiedby pgtype.Int8
	ID         int64
}

func (q *Queries) SetTaskStatusVerified(ctx context.Context, arg SetTaskStatusVerifiedParams) error {
	_, err := q.db.Exec(ctx, setTaskStatusVerified, arg.Verifiedby, arg.ID)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE Tasks
SET 
    status = $1,
    comment = COALESCE($2, comment),
    verifiedBy = CASE WHEN $1 = 'verified' THEN $3 ELSE verifiedBy END,
    verifiedAt = CASE WHEN $1 = 'verified' THEN NOW() ELSE verifiedAt END,
    completedBy = CASE WHEN $1 = 'completed' THEN $3 ELSE completedBy END,
    completedAt = CASE WHEN $1 = 'completed' THEN NOW() ELSE completedAt END,
    movedInProgressBy = CASE WHEN $1 = 'inProgress' THEN $3 ELSE movedInProgressBy END,
    movedInProgressAt = CASE WHEN $1 = 'inProgress' THEN NOW() ELSE movedInProgressAt END,
    failedBy = CASE WHEN $1 = 'failed' THEN $3 ELSE failedBy END,
    failedAt = CASE WHEN $1 = 'failed' THEN NOW() ELSE failedAt END
WHERE id = $4
`

type UpdateTaskStatusParams struct {
	Status  Taskstatus
	Comment pgtype.Text
	Userid  pgtype.Int8
	Taskid  int64
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.Exec(ctx, updateTaskStatus,
		arg.Status,
		arg.Comment,
		arg.Userid,
		arg.Taskid,
	)
	return err
}
