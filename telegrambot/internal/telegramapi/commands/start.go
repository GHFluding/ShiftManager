package commands

import (
	"context"
	"fmt"
	"strings"
	"telegramSM/internal/telegramapi/model"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type state string

const (
	StateInitial    = state("initial")
	StateAwaitName  = state("await_name")
	StateAwaitBtrx  = state("await_btrx")
	StateRegistered = state("registered")
)

type User struct {
	TelegramID int
	Data       UserData
	State      state
	Role       string
}

type UserData struct {
	Name   string
	BtrxID string
}

type UserStorage interface {
	GetUser(ctx context.Context, telegramID int) (*User, error)
	SaveUser(ctx context.Context, user User) error
	CheckUserRole(ctx context.Context, telegramID int) (string, error)
}

// StartHandler - handler command /start with user role cheking
func StartHandler(userStorage UserStorage) model.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID

		// Check user data .if user is registered, check user role
		role, err := userStorage.CheckUserRole(ctx, userID)
		if err == nil && role != "" {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
				"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∞ —Ä–æ–ª—å: %s\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
				role,
			))
			_, err = bot.Send(msg)
			return err
		}

		user, err := userStorage.GetUser(ctx, userID)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
		}

		if user.State != StateRegistered {
			switch user.State {
			case StateAwaitName:
				msg := tgbotapi.NewMessage(chatID, "‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
				_, err = bot.Send(msg)
				return err
			case StateAwaitBtrx:
				msg := tgbotapi.NewMessage(chatID, "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitrix24 ID (–∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç):")
				_, err = bot.Send(msg)
				return err
			}
		}

		newUser := User{
			TelegramID: userID,
			State:      StateAwaitName,
		}

		if err := userStorage.SaveUser(ctx, newUser); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
		}

		msg := tgbotapi.NewMessage(chatID, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
		_, err = bot.Send(msg)
		return err
	}
}

// NameHandler
func NameHandler(userStorage UserStorage) model.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
		if update.Message == nil || update.Message.Text == "" {
			return nil
		}

		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID
		name := strings.TrimSpace(update.Message.Text)

		user, err := userStorage.GetUser(ctx, userID)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
		}

		if user == nil || user.State != StateAwaitName {
			msg := tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –∫–æ–º–∞–Ω–¥—ã /start")
			_, err = bot.Send(msg)
			return err
		}

		if len(name) < 5 || !strings.Contains(name, " ") {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞):")
			_, err = bot.Send(msg)
			return err
		}

		user.Data.Name = name
		user.State = StateAwaitBtrx

		if err := userStorage.SaveUser(ctx, *user); err != nil {
			return err
		}

		msg := tgbotapi.NewMessage(chatID, "‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitrix24 ID (–∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç):")
		_, err = bot.Send(msg)
		return err
	}
}

// BitrixHandler
func BitrixHandler(userStorage UserStorage) model.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
		if update.Message == nil || update.Message.Text == "" {
			return nil
		}

		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID
		input := strings.TrimSpace(update.Message.Text)

		user, err := userStorage.GetUser(ctx, userID)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
		}

		if user == nil || user.State != StateAwaitBtrx {
			msg := tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –∫–æ–º–∞–Ω–¥—ã /start")
			_, err = bot.Send(msg)
			return err
		}

		btrxID := ""
		if strings.ToLower(input) != "–Ω–µ—Ç" {
			btrxID = input
		}

		user.Data.BtrxID = btrxID
		user.State = StateRegistered

		if err := userStorage.SaveUser(ctx, *user); err != nil {
			return err
		}

		confirmation := fmt.Sprintf("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüë§ –§–ò–û: %s", user.Data.Name)
		if btrxID != "" {
			confirmation += fmt.Sprintf("\nüÜî Bitrix24 ID: %s", btrxID)
		}
		confirmation += fmt.Sprintf("\nüë§ –í–∞—à–∞ —Ä–æ–ª—å: %s\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", user.Role)

		msg := tgbotapi.NewMessage(chatID, confirmation)
		_, err = bot.Send(msg)
		return err
	}
}
